{"version":3,"sources":["components/styles/App.js","services/dataGathering/findCity.js","services/dataGathering/fetchWeatherData.js","services/dataGathering/fetchGifData.js","services/calculations/calculateDayOrNight.js","services/calculations/calculateWeatherType.js","components/utils/collateWeatherData.js","components/utils/handleErrors.js","components/UI/styles/Search.js","components/UI/Search.js","components/UI/Card.js","components/Cities.js","services/calculations/calculateTime.js","services/calculations/calculateTemp.js","components/styles/WeatherInfo.js","components/UI/styles/Toggle.js","components/UI/Toggle.js","components/WeatherInfo.js","components/Weather.js","components/App.js","reportWebVitals.js","index.js"],"names":["AppWrapper","styled","div","props","background","findCity","name","data","console","log","titleCaseName","split","map","w","toUpperCase","substr","toLowerCase","join","titleCase","results","forEach","c","push","fetchWeatherData","query","a","process","axios","get","response","weather","day","rainy","sunny","cloudy","snowy","misty","night","fetchGifData","time","type","calculateDayOrNight","sunrise","sunset","calculateWeatherType","main","weatherId","collateWeatherData","location","sys","country","tempInfo","timeInfo","timezone","currentTime","dt","description","icon","handleErrors","error","message","request","SearchWrapper","Search","placeholder","value","onChange","handleInputChange","onClick","event","handleSubmit","MainWrapper","CityStateWrapper","CountryWrapper","Card","cityData","handleClick","img","id","state","src","alt","CardsWrapper","Cities","citiesData","length","i","calculateTime","unix_timestamp","offset","d","Date","utc","getTime","getTimezoneOffset","toLocaleTimeString","navigator","language","hour","minute","calculateTemp","temp","mode","convertedTemp","Math","trunc","HeaderWrapper","ImageWrapper","TempWrapper","TimeWrapper","CheckBoxWrapper","CheckBoxLabel","label","CheckBox","input","Toggle","handleToggle","htmlFor","WeatherInfo","imgUrl","unix_current","unix_sunrise","unix_sunset","temp_now","temp_max","temp_min","temp_feels_like","feels_like","humidity","useState","tempMode","setTempMode","e","target","checked","Weather","weatherData","cities","Object","values","App","setQuery","setCitiesData","setWeatherData","setBackground","errorMessage","setErrorMessage","grabAndSetWeatherData","cityId","then","weatherType","time_period","images","original","url","catch","className","preventDefault","queryResults","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a659ad3.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  font-size: 14px;\n\n  &::after {\n    content: \"\";\n    background: url(${props => props.background});\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    background-position: center-top;\n    background-size: cover;\n    opacity: 0.5;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    position: absolute;\n    z-index: -1;\n  }\n\n  height: 100vh;\n  width: 100%;\n`;\n\nexport { AppWrapper };\n","const titleCase = name => {\n  return name\n    .split(\" \")\n    .map(w => w[0].toUpperCase() + w.substr(1).toLowerCase())\n    .join(\" \");\n};\n\nconst findCity = (name, data) => {\n  console.log(\"helllooooooo\");\n  console.log(\"name\", name);\n  console.log(\"data\", data);\n  const titleCaseName = titleCase(name);\n  console.log(\"new name\", titleCaseName);\n  // return data.filter(c => c.name.toLowerCase() === name.toLowerCase());\n  const results = [];\n\n  data.forEach(c => {\n    if (c.name === titleCaseName) {\n      results.push(c);\n    }\n  });\n\n  console.log(results);\n  return results;\n};\n\nexport default findCity;\n","import axios from \"axios\";\n\nconst fetchWeatherData = async query => {\n  const API_key = process.env.REACT_APP_OPENWEATHER_SECRET;\n  const response = await axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?id=${query}&appid=${API_key}`\n  );\n\n  return response;\n};\n\nexport default fetchWeatherData;\n","import axios from \"axios\";\n\nconst weather = {\n  day: {\n    rainy: \"iiJ870TcI3PZKxatzS\",\n    sunny: \"2wh8ugh52dGSJYrA26\",\n    cloudy: \"I2QPaWgUp4Ow8\",\n    snowy: \"FjURk1y29dX4Q\",\n    misty: \"3o72F65dJl7Z0PtdjG\"\n  },\n  night: {\n    rainy: \"pVGsAWjzvXcZW4ZBTE\",\n    sunny: \"MHboUUIoxzOKs\",\n    cloudy: \"IeSXccYMz3K4U\",\n    snowy: \"FjURk1y29dX4Q\",\n    misty: \"3o72F65dJl7Z0PtdjG\"\n  }\n};\n\nconst fetchGifData = async (time, type) => {\n  const API_key = process.env.REACT_APP_GIPHY_API_KEY;\n  const response = await axios.get(\n    `https://api.giphy.com/v1/gifs/${weather[time][type]}?api_key=${API_key}`\n  );\n\n  return response;\n};\n\nexport default fetchGifData;\n","const calculateDayOrNight = (time, sunrise, sunset) => {\n  let period;\n  time > sunrise && time < sunset ? (period = \"day\") : (period = \"night\");\n  return period;\n};\n\nexport default calculateDayOrNight;\n","const calculateWeatherType = (main, weatherId) => {\n  let type;\n  if (main === \"Thunderstorm\" || main === \"Drizzle\" || main === \"Rain\") {\n    type = \"rainy\";\n  } else if (main === \"Snow\") {\n    type = \"snowy\";\n  } else if (weatherId > 700 && weatherId < 800) {\n    type = \"misty\";\n  } else if (main === \"Clear\") {\n    type = \"sunny\";\n  } else if (main === \"Clouds\") {\n    type = \"cloudy\";\n  }\n\n  return type;\n};\n\nexport default calculateWeatherType;\n","const collateWeatherData = data => {\n  const location = `${data.name}, ${data.sys.country}`;\n  const tempInfo = data.main;\n  const timeInfo = {\n    timezone: data.timezone,\n    currentTime: data.dt,\n    sunrise: data.sys.sunrise,\n    sunset: data.sys.sunset\n  };\n\n  const description = data.weather[0].description;\n  const icon = data.weather[0].icon;\n\n  return { location, tempInfo, timeInfo, description, icon };\n};\n\nexport default collateWeatherData;\n","const handleErrors = error => {\n  if (error.response) {\n    // Request made and server responded\n    return error.response.data.message;\n  } else if (error.request) {\n    // The request was made but no response was received\n    return error.request;\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    return error.message;\n  }\n};\n\nexport default handleErrors;\n","import styled from \"styled-components\";\n\nconst SearchWrapper = styled.div`\n  margin-top: 200px;\n  margin-bottom: 10px;\n  width: 400px;\n\n  input {\n    height: 30px;\n    width: 60%;\n    border: 1px solid #adb5bd; /* gray */\n    border-radius: 10px;\n    padding-left: 10px;\n    margin-right: 20px;\n\n    font-family: \"Zen Dots\", cursive;\n    font-size: 11px;\n    font-weight: 200;\n    letter-spacing: 0.2em;\n  }\n\n  input:focus {\n    outline: none;\n  }\n\n  button {\n    border: 1px solid #0d21a1; /* blue */\n    border-radius: 5px;\n    background: #fff;\n    color: #0d21a1; /* blue */\n    cursor: pointer;\n    padding: 8px 12px;\n    transition: all ease-in-out 150ms;\n\n    font-family: \"Zen Dots\", cursive;\n  }\n\n  button:hover {\n    background: #0d21a1; /* blue */\n    color: #fff;\n  }\n\n  button:focus {\n    outline: none;\n  }\n`;\n\nexport default SearchWrapper;\n","import React from \"react\";\n\nimport SearchWrapper from \"./styles/Search\";\n\nconst Search = props => {\n  return (\n    <SearchWrapper>\n      <input\n        name=\"query\"\n        type=\"text\"\n        placeholder=\"...enter city here\"\n        value={props.query}\n        onChange={props.handleInputChange}\n      />\n      <button onClick={event => props.handleSubmit(event, props.query)}>\n        Search\n      </button>\n    </SearchWrapper>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  border: 1px solid #efefef;\n  padding: 10px 20px;\n  min-width: 140px;\n\n  cursor: pointer;\n`;\n\nconst CityStateWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  #state {\n    margin-left: 5px;\n  }\n`;\n\nconst CountryWrapper = styled.div`\n  display flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Card = ({ cityData, handleClick }) => {\n  const img = `https://www.countryflags.io/${cityData.country.toLowerCase()}/flat/24.png`;\n\n  return (\n    <MainWrapper onClick={handleClick(cityData.id)}>\n      <CityStateWrapper id=\"cityStateWrapper\">\n        <div id=\"name\">{cityData.name}</div>\n        <div id=\"state\">{cityData.state}</div>\n      </CityStateWrapper>\n      <CountryWrapper id=\"countryWrapper\">\n        <img id=\"flag\" src={img} alt=\"country flag\" />\n        <div id=\"country\">{cityData.country}</div>\n      </CountryWrapper>\n    </MainWrapper>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\n\nimport Card from \"./UI/Card\";\n\nconst CardsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, auto);\n`;\n\nconst Cities = props => {\n  return (\n    <div>\n      {props.citiesData && (\n        <Fragment>\n          <div id=\"cityCards\">...found {props.citiesData.length} cities</div>\n          <CardsWrapper>\n            {props.citiesData.map((cityData, i) => {\n              return (\n                <Card\n                  key={i}\n                  cityData={cityData}\n                  handleClick={props.handleClick}\n                />\n              );\n            })}\n          </CardsWrapper>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Cities;\n","const calculateTime = (unix_timestamp, timezone) => {\n  const dt = unix_timestamp * 1000;\n  const offset = timezone / 3600;\n\n  // create Date object for current location\n  const d = new Date(dt);\n\n  // convert to msec\n  // add local time zone offset\n  // get UTC time in msec\n  const utc = d.getTime() + d.getTimezoneOffset() * 60000;\n\n  // create new Date object for different city\n  // using supplied offset\n  const nd = new Date(utc + 3600000 * offset).toLocaleTimeString(\n    navigator.language,\n    {\n      hour: \"numeric\",\n      minute: \"2-digit\"\n    }\n  );\n  return nd;\n};\n\nexport default calculateTime;\n","const calculateTemp = (temp, mode) => {\n  let convertedTemp;\n  mode === \"celsius\"\n    ? (convertedTemp = temp - 273.15)\n    : (convertedTemp = 1.8 * (temp - 273) + 32);\n  return Math.trunc(convertedTemp);\n};\n\nexport default calculateTemp;\n","import styled from \"styled-components\";\n\nconst MainWrapper = styled.div`\n  width: 300px;\n\n  padding: 10px 20px;\n  margin-top: 20px;\n\n  background-color: rgba(0, 0, 0, 0.4);\n  color: white;\n\n  span {\n    font-size: 12px;\n  }\n`;\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n\n  flex-direction: column;\n\n  img {\n    height: 96px;\n    width: 96px;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n`;\n\nconst TempWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n\n  h1 {\n    font-size: 32px;\n  }\n\n  #sideTemp {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst TimeWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  margin: 20px;\n`;\n\nexport { MainWrapper, HeaderWrapper, ImageWrapper, TempWrapper, TimeWrapper };\n","import styled from \"styled-components\";\n\nconst CheckBoxWrapper = styled.div`\n  position: relative;\n`;\nconst CheckBoxLabel = styled.label`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 42px;\n  height: 26px;\n  border-radius: 15px;\n  background: #bebebe;\n  cursor: pointer;\n  &::after {\n    content: \"\";\n    display: block;\n    border-radius: 50%;\n    width: 18px;\n    height: 18px;\n    margin: 3px;\n    background: #ffffff;\n    box-shadow: 1px 3px 3px 1px rgba(0, 0, 0, 0.2);\n    transition: 0.2s;\n  }\n`;\nconst CheckBox = styled.input`\n  opacity: 0;\n  z-index: 1;\n  border-radius: 15px;\n  width: 42px;\n  height: 26px;\n  &:checked + ${CheckBoxLabel} {\n    background: #ffa500;\n    &::after {\n      content: \"\";\n      display: block;\n      border-radius: 50%;\n      width: 18px;\n      height: 18px;\n      margin-left: 21px;\n      transition: 0.2s;\n    }\n  }\n`;\n\nexport { CheckBoxWrapper, CheckBoxLabel, CheckBox };\n","import React from \"react\";\nimport { CheckBoxWrapper, CheckBoxLabel, CheckBox } from \"./styles/Toggle\";\n\nconst Toggle = ({ handleToggle }) => {\n  return (\n    <div>\n      <CheckBoxWrapper>\n        <CheckBox id=\"checkbox\" type=\"checkbox\" onClick={handleToggle} />\n        <CheckBoxLabel htmlFor=\"checkbox\" />\n      </CheckBoxWrapper>\n    </div>\n  );\n};\n\nexport default Toggle;\n","import React, { useState } from \"react\";\nimport calculateTime from \"../services/calculations/calculateTime\";\nimport calculateTemp from \"../services/calculations/calculateTemp\";\nimport {\n  MainWrapper,\n  HeaderWrapper,\n  ImageWrapper,\n  TempWrapper,\n  TimeWrapper\n} from \"./styles/WeatherInfo\";\n\nimport Toggle from \"./UI/Toggle\";\n\nconst WeatherInfo = props => {\n  const imgUrl = `http://openweathermap.org/img/wn/${props.data.icon}@2x.png`;\n  const unix_current = props.data.timeInfo.currentTime;\n  const unix_sunrise = props.data.timeInfo.sunrise;\n  const unix_sunset = props.data.timeInfo.sunset;\n  const timezone = props.data.timeInfo.timezone;\n  const temp_now = props.data.tempInfo.temp;\n  const temp_max = props.data.tempInfo.temp_max;\n  const temp_min = props.data.tempInfo.temp_min;\n  const temp_feels_like = props.data.tempInfo.feels_like;\n  const humidity = props.data.tempInfo.humidity;\n\n  const [tempMode, setTempMode] = useState(\"celsius\");\n\n  const handleToggle = e => {\n    e.target.checked ? setTempMode(\"fahrenheit\") : setTempMode(\"celsius\");\n  };\n\n  return (\n    <MainWrapper id=\"main\">\n      <HeaderWrapper id=\"header\">\n        <span id=\"location\">{props.data.location}</span>\n        <span id=\"description\">{props.data.description}</span>\n      </HeaderWrapper>\n\n      <ImageWrapper>\n        <img src={imgUrl} alt={props.data.description} />\n      </ImageWrapper>\n\n      <TempWrapper id=\"tempInfo\">\n        <div id=\"mainTemp\">\n          <h1>{calculateTemp(temp_now, tempMode)}º</h1>\n        </div>\n        <div id=\"sideTemp\">\n          <Toggle handleToggle={handleToggle} />\n          <span id=\"maxTemp\">max: {calculateTemp(temp_max, tempMode)}º</span>\n          <span id=\"minTemp\">min: {calculateTemp(temp_min, tempMode)}º</span>\n          <span id=\"feelsLike\">\n            feels like: {calculateTemp(temp_feels_like, tempMode)}º\n          </span>\n          <span id=\"humidity\">humidity: {humidity}</span>\n        </div>\n      </TempWrapper>\n\n      <TimeWrapper>\n        <span id=\"currentTime\">\n          Current time: {calculateTime(unix_current, timezone)}\n        </span>\n        <span id=\"sunriseTime\">\n          Sunrise: {calculateTime(unix_sunrise, timezone)}\n        </span>\n        <span id=\"sunsetTime\">\n          Sunset: {calculateTime(unix_sunset, timezone)}\n        </span>\n      </TimeWrapper>\n    </MainWrapper>\n  );\n};\n\nexport default WeatherInfo;\n","import React from \"react\";\n\nimport WeatherInfo from \"./WeatherInfo\";\n\nconst Weather = props => {\n  return (\n    <div>\n      {props.weatherData && (\n        <WeatherInfo data={props.weatherData} background={props.background} />\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\nimport { AppWrapper } from \"./styles/App\";\n\nimport findCity from \"../services/dataGathering/findCity\";\nimport fetchWeatherData from \"../services/dataGathering/fetchWeatherData\";\nimport fetchGifData from \"../services/dataGathering/fetchGifData\";\nimport calculateDayOrNight from \"../services/calculations/calculateDayOrNight\";\nimport calculateWeatherType from \"../services/calculations/calculateWeatherType\";\nimport collateWeatherData from \"./utils/collateWeatherData\";\nimport handleErrors from \"./utils/handleErrors\";\n\nimport Search from \"./UI/Search\";\nimport Cities from \"./Cities\";\nimport Weather from \"./Weather\";\n\nimport * as data from \"../assets/city.list.json\";\nconst cities = Object.values(data);\n// const cities = Object.values(data)[0];\nconsole.log(cities);\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [citiesData, setCitiesData] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [background, setBackground] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const grabAndSetWeatherData = cityId => {\n    fetchWeatherData(cityId)\n      .then(response => {\n        console.log(response);\n        const data = response.data;\n        setWeatherData(collateWeatherData(data));\n\n        let weatherType = calculateWeatherType(\n          data.weather[0].main,\n          data.weather[0].id\n        );\n        const time_period = calculateDayOrNight(\n          data.dt,\n          data.sys.sunrise,\n          data.sys.sunset\n        );\n\n        fetchGifData(time_period, weatherType)\n          .then(response => {\n            console.log(\"GIF RESPONSE\", response);\n            setBackground(response.data.data.images.original.url);\n          })\n          .catch(error => {\n            const message = handleErrors(error);\n            setErrorMessage(message);\n          });\n        setErrorMessage(\"\");\n        setCitiesData(null);\n      })\n      .catch(error => {\n        const message = handleErrors(error);\n        setErrorMessage(message);\n      });\n  };\n\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSearchSubmit = (event, query) => {\n    event.preventDefault();\n    const queryResults = findCity(query, cities);\n    console.log(queryResults);\n    setQuery(\"\");\n    if (queryResults.length > 1) {\n      setCitiesData(queryResults);\n    } else if (queryResults.length === 0) {\n      setErrorMessage(\"couldn't find city\");\n    } else {\n      grabAndSetWeatherData(queryResults[0].id);\n    }\n  };\n\n  const handleCityClick = cityId => event => {\n    grabAndSetWeatherData(cityId);\n  };\n\n  return (\n    <div className=\"App\">\n      <AppWrapper background={background}>\n        <Search\n          handleSubmit={handleSearchSubmit}\n          handleInputChange={handleInputChange}\n          query={query}\n        />\n        <div id=\"errorMessage\">{errorMessage}</div>\n        <Cities citiesData={citiesData} handleClick={handleCityClick} />\n        <Weather\n          weatherData={weatherData}\n          background={background}\n          mode={\"celsius\"}\n        />\n        {!weatherData && !citiesData && (\n          <span id=\"searchCTA\">Enter a city to find out the weather!</span>\n        )}\n      </AppWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}